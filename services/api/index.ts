/**
 * Generated by orval üç∫
 * Do not edit manually.
 * OpenAPI spec version: 1.0.0
 *
 */
import useSwr from "swr";
import type { Arguments, Key, SWRConfiguration } from "swr";

import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";

import { orvalFetcher } from "./fetcher";
export interface PlatformViewModel {
  timestamp: string;
  errorCode?: string;
  message: string;
}

export interface UpdateUserRequest {
  nickname: string;
}

export interface UpdateUserViewModel {
  id: string;
  email: string;
  nickname: string;
}

export interface UpdateGameRegistrationRequest {
  uniqueName?: string;
  displayName?: string;
  shortDescription?: string;
  rule?: string;
  imageUrl?: string;
  minPlayers?: number;
  maxPlayers?: number;
  frontEndUrl?: string;
  backEndUrl?: string;
}

export interface UpdateGameRegistrationViewModel {
  id: string;
  uniqueName: string;
  displayName: string;
  shortDescription: string;
  rule: string;
  imageUrl: string;
  minPlayers: number;
  maxPlayers: number;
  frontEndUrl: string;
  backEndUrl: string;
  createdOn: string;
}

export interface CreateUserRequest {
  email: string;
}

export interface CreateRoomRequest {
  name?: string;
  gameId?: string;
  password?: string;
  maxPlayers?: number;
  minPlayers?: number;
}

export interface FastJoinRoomRequest {
  gameId: string;
}

export interface FastJoinRoomViewModel {
  roomId: string;
}

export interface StartGameViewModel {
  url: string;
}

export interface JoinRoomRequest {
  password?: string;
}

export interface RegisterGameRequest {
  uniqueName?: string;
  displayName?: string;
  shortDescription?: string;
  rule?: string;
  imageUrl?: string;
  minPlayers?: number;
  maxPlayers?: number;
  frontEndUrl?: string;
  backEndUrl?: string;
}

export interface CommentGameRequest {
  gameId: string;
  rating: number;
  comment: string;
}

export interface UpdateGameCommentRequest {
  rating: number;
  comment: string;
}

export interface AuthenticateToken {
  token: string;
}

export interface AddressStandardClaim {
  region?: string;
  country?: string;
  streetAddress?: string;
  postalCode?: string;
  locality?: string;
  formatted?: string;
}

export interface GrantedAuthority {
  authority?: string;
}

export type OidcIdTokenClaims = { [key: string]: { [key: string]: unknown } };

export interface OidcIdToken {
  tokenValue?: string;
  issuedAt?: string;
  expiresAt?: string;
  claims?: OidcIdTokenClaims;
  nonce?: string;
  authenticatedAt?: string;
  authenticationMethods?: string[];
  authorizedParty?: string;
  audience?: string[];
  issuer?: string;
  authenticationContextClass?: string;
  subject?: string;
  authorizationCodeHash?: string;
  accessTokenHash?: string;
  address?: AddressStandardClaim;
  locale?: string;
  fullName?: string;
  zoneInfo?: string;
  email?: string;
  profile?: string;
  phoneNumberVerified?: boolean;
  phoneNumber?: string;
  website?: string;
  emailVerified?: boolean;
  gender?: string;
  birthdate?: string;
  updatedAt?: string;
  preferredUsername?: string;
  picture?: string;
  middleName?: string;
  nickName?: string;
  givenName?: string;
  familyName?: string;
}

export type OidcUserClaims = { [key: string]: { [key: string]: unknown } };

export type OidcUserAttributes = { [key: string]: { [key: string]: unknown } };

export interface OidcUser {
  userInfo?: OidcUserInfo;
  idToken?: OidcIdToken;
  claims?: OidcUserClaims;
  attributes?: OidcUserAttributes;
  authorities?: GrantedAuthority[];
  name?: string;
  nonce?: string;
  issuedAt?: string;
  authenticatedAt?: string;
  authenticationMethods?: string[];
  authorizedParty?: string;
  audience?: string[];
  expiresAt?: string;
  issuer?: string;
  authenticationContextClass?: string;
  subject?: string;
  authorizationCodeHash?: string;
  accessTokenHash?: string;
  address?: AddressStandardClaim;
  locale?: string;
  fullName?: string;
  zoneInfo?: string;
  email?: string;
  profile?: string;
  phoneNumberVerified?: boolean;
  phoneNumber?: string;
  website?: string;
  emailVerified?: boolean;
  gender?: string;
  birthdate?: string;
  updatedAt?: string;
  preferredUsername?: string;
  picture?: string;
  middleName?: string;
  nickName?: string;
  givenName?: string;
  familyName?: string;
}

export type OidcUserInfoClaims = { [key: string]: { [key: string]: unknown } };

export interface OidcUserInfo {
  claims?: OidcUserInfoClaims;
  address?: AddressStandardClaim;
  locale?: string;
  fullName?: string;
  zoneInfo?: string;
  email?: string;
  profile?: string;
  subject?: string;
  phoneNumberVerified?: boolean;
  phoneNumber?: string;
  website?: string;
  emailVerified?: boolean;
  gender?: string;
  birthdate?: string;
  updatedAt?: string;
  preferredUsername?: string;
  picture?: string;
  middleName?: string;
  nickName?: string;
  givenName?: string;
  familyName?: string;
}

export interface AuthenticationMethod {
  value?: string;
}

export interface AuthorizationGrantType {
  value?: string;
}

export interface ClientAuthenticationMethod {
  value?: string;
}

export interface ClientRegistration {
  registrationId?: string;
  clientId?: string;
  clientSecret?: string;
  clientAuthenticationMethod?: ClientAuthenticationMethod;
  authorizationGrantType?: AuthorizationGrantType;
  redirectUri?: string;
  scopes?: string[];
  providerDetails?: ProviderDetails;
  clientName?: string;
  /** @deprecated */
  redirectUriTemplate?: string;
}

export interface OAuth2AccessToken {
  tokenValue?: string;
  issuedAt?: string;
  expiresAt?: string;
  tokenType?: TokenType;
  scopes?: string[];
}

export interface OAuth2AuthorizedClient {
  clientRegistration?: ClientRegistration;
  principalName?: string;
  accessToken?: OAuth2AccessToken;
  refreshToken?: OAuth2RefreshToken;
}

export interface OAuth2RefreshToken {
  tokenValue?: string;
  issuedAt?: string;
  expiresAt?: string;
}

export type ProviderDetailsConfigurationMetadata = {
  [key: string]: { [key: string]: unknown };
};

export interface ProviderDetails {
  authorizationUri?: string;
  tokenUri?: string;
  userInfoEndpoint?: UserInfoEndpoint;
  jwkSetUri?: string;
  issuerUri?: string;
  configurationMetadata?: ProviderDetailsConfigurationMetadata;
}

export interface TokenType {
  value?: string;
}

export interface UserInfoEndpoint {
  uri?: string;
  authenticationMethod?: AuthenticationMethod;
  userNameAttributeName?: string;
}

export interface GetUserViewModel {
  id: string;
  email: string;
  nickname: string;
  lastPlayedGameId?: string;
  playedGamesIds?: string[];
  currentGameRoomId?: string;
  currentGameUrl?: string;
}

export interface Game {
  id: string;
  name: string;
}

export interface GetRoomsViewModel {
  rooms: RoomViewModel[];
  page: Page;
}

export interface Page {
  total: number;
  page: number;
  perPage: number;
}

export interface Player {
  id: string;
  nickname: string;
}

export interface RoomViewModel {
  id: string;
  name: string;
  game: Game;
  host: Player;
  maxPlayers: number;
  minPlayers: number;
  currentPlayers: number;
  isLocked: boolean;
}

export interface GetRoomViewModel {
  id: string;
  name: string;
  game: Game;
  host: Player;
  players: Player[];
  maxPlayers: number;
  minPlayers: number;
  currentPlayers: number;
  isLocked: boolean;
  status: string;
}

export interface Unit {
  [key: string]: unknown;
}

export interface GameRegistrationViewModel {
  id: string;
  name: string;
  img: string;
  minPlayers: number;
  maxPlayers: number;
  createdOn: string;
  rating: number;
  numberOfComments: number;
}

export type UpdateUserBody = {
  updateUserRequest?: UpdateUserRequest;
};

export type CreateUserBody = {
  createUserRequest?: CreateUserRequest;
};

export type GetRoomsParams = {
  status: string;
  public?: boolean;
  keyword?: string;
  page: number;
  perPage: number;
};

export type CreateRoom200 = { [key: string]: unknown };

export type FindGameRegistrationsParams = {
  sort_by?: string;
};

export type RegisterGame200 = { [key: string]: unknown };

export type HomeParams = {
  client: OAuth2AuthorizedClient;
};

export type LoginParams = {
  type: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getUser = (options?: SecondParameter<typeof orvalFetcher>) => {
  return orvalFetcher<GetUserViewModel>(
    { url: `/users/me`, method: "GET" },
    options
  );
};

export const getGetUserKey = () => [`/users/me`] as const;

export type GetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUser>>
>;
export type GetUserQueryError = PlatformViewModel | PlatformViewModel;

export const useGetUser = <
  TError = PlatformViewModel | PlatformViewModel,
>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getUser>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  request?: SecondParameter<typeof orvalFetcher>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetUserKey() : null));
  const swrFn = () => getUser(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const updateUser = (
  updateUserBody: UpdateUserBody,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<UpdateUserViewModel>(
    {
      url: `/users/me`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateUserBody,
    },
    options
  );
};

export const getUpdateUserMutationFetcher = (
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (
    _: Key,
    { arg }: { arg: UpdateUserBody }
  ): Promise<UpdateUserViewModel> => {
    return updateUser(arg, options);
  };
};
export const getUpdateUserMutationKey = () => [`/users/me`] as const;

export type UpdateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUser>>
>;
export type UpdateUserMutationError = PlatformViewModel | PlatformViewModel;

export const useUpdateUser = <
  TError = PlatformViewModel | PlatformViewModel,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof updateUser>>,
    TError,
    Key,
    UpdateUserBody,
    Awaited<ReturnType<typeof updateUser>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof orvalFetcher>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getUpdateUserMutationKey();
  const swrFn = getUpdateUserMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const updateGameRegistration = (
  gameId: string,
  updateGameRegistrationRequest: UpdateGameRegistrationRequest,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<UpdateGameRegistrationViewModel>(
    {
      url: `/games/${gameId}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: updateGameRegistrationRequest,
    },
    options
  );
};

export const getUpdateGameRegistrationMutationFetcher = (
  gameId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (
    _: Key,
    { arg }: { arg: UpdateGameRegistrationRequest }
  ): Promise<UpdateGameRegistrationViewModel> => {
    return updateGameRegistration(gameId, arg, options);
  };
};
export const getUpdateGameRegistrationMutationKey = (gameId: string) =>
  [`/games/${gameId}`] as const;

export type UpdateGameRegistrationMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateGameRegistration>>
>;
export type UpdateGameRegistrationMutationError =
  | PlatformViewModel
  | PlatformViewModel;

export const useUpdateGameRegistration = <
  TError = PlatformViewModel | PlatformViewModel,
>(
  gameId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateGameRegistration>>,
      TError,
      Key,
      UpdateGameRegistrationRequest,
      Awaited<ReturnType<typeof updateGameRegistration>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getUpdateGameRegistrationMutationKey(gameId);
  const swrFn = getUpdateGameRegistrationMutationFetcher(
    gameId,
    requestOptions
  );

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const createUser = (
  createUserBody: CreateUserBody,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<PlatformViewModel>(
    {
      url: `/users`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createUserBody,
    },
    options
  );
};

export const getCreateUserMutationFetcher = (
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (
    _: Key,
    { arg }: { arg: CreateUserBody }
  ): Promise<PlatformViewModel> => {
    return createUser(arg, options);
  };
};
export const getCreateUserMutationKey = () => [`/users`] as const;

export type CreateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUser>>
>;
export type CreateUserMutationError = PlatformViewModel | PlatformViewModel;

export const useCreateUser = <
  TError = PlatformViewModel | PlatformViewModel,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    Key,
    CreateUserBody,
    Awaited<ReturnType<typeof createUser>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof orvalFetcher>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCreateUserMutationKey();
  const swrFn = getCreateUserMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const getRooms = (
  params: GetRoomsParams,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<GetRoomsViewModel>(
    { url: `/rooms`, method: "GET", params },
    options
  );
};

export const getGetRoomsKey = (params: GetRoomsParams) =>
  [`/rooms`, ...(params ? [params] : [])] as const;

export type GetRoomsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRooms>>
>;
export type GetRoomsQueryError = PlatformViewModel | PlatformViewModel;

export const useGetRooms = <TError = PlatformViewModel | PlatformViewModel>(
  params: GetRoomsParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getRooms>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetRoomsKey(params) : null));
  const swrFn = () => getRooms(params, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const createRoom = (
  createRoomRequest: CreateRoomRequest,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<CreateRoom200>(
    {
      url: `/rooms`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createRoomRequest,
    },
    options
  );
};

export const getCreateRoomMutationFetcher = (
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (
    _: Key,
    { arg }: { arg: CreateRoomRequest }
  ): Promise<CreateRoom200> => {
    return createRoom(arg, options);
  };
};
export const getCreateRoomMutationKey = () => [`/rooms`] as const;

export type CreateRoomMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRoom>>
>;
export type CreateRoomMutationError = PlatformViewModel | PlatformViewModel;

export const useCreateRoom = <
  TError = PlatformViewModel | PlatformViewModel,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof createRoom>>,
    TError,
    Key,
    CreateRoomRequest,
    Awaited<ReturnType<typeof createRoom>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof orvalFetcher>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCreateRoomMutationKey();
  const swrFn = getCreateRoomMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const fastJoinRoom = (
  fastJoinRoomRequest: FastJoinRoomRequest,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<FastJoinRoomViewModel>(
    {
      url: `/rooms:fastJoin`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: fastJoinRoomRequest,
    },
    options
  );
};

export const getFastJoinRoomMutationFetcher = (
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (
    _: Key,
    { arg }: { arg: FastJoinRoomRequest }
  ): Promise<FastJoinRoomViewModel> => {
    return fastJoinRoom(arg, options);
  };
};
export const getFastJoinRoomMutationKey = () => [`/rooms:fastJoin`] as const;

export type FastJoinRoomMutationResult = NonNullable<
  Awaited<ReturnType<typeof fastJoinRoom>>
>;
export type FastJoinRoomMutationError = PlatformViewModel | PlatformViewModel;

export const useFastJoinRoom = <
  TError = PlatformViewModel | PlatformViewModel,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof fastJoinRoom>>,
    TError,
    Key,
    FastJoinRoomRequest,
    Awaited<ReturnType<typeof fastJoinRoom>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof orvalFetcher>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getFastJoinRoomMutationKey();
  const swrFn = getFastJoinRoomMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const startGame = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<StartGameViewModel>(
    { url: `/rooms/${roomId}:startGame`, method: "POST" },
    options
  );
};

export const getStartGameMutationFetcher = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<StartGameViewModel> => {
    return startGame(roomId, options);
  };
};
export const getStartGameMutationKey = (roomId: string) =>
  [`/rooms/${roomId}:startGame`] as const;

export type StartGameMutationResult = NonNullable<
  Awaited<ReturnType<typeof startGame>>
>;
export type StartGameMutationError = PlatformViewModel | PlatformViewModel;

export const useStartGame = <TError = PlatformViewModel | PlatformViewModel>(
  roomId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof startGame>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof startGame>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getStartGameMutationKey(roomId);
  const swrFn = getStartGameMutationFetcher(roomId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const endGame = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<null>(
    { url: `/rooms/${roomId}:endGame`, method: "POST" },
    options
  );
};

export const getEndGameMutationFetcher = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<null> => {
    return endGame(roomId, options);
  };
};
export const getEndGameMutationKey = (roomId: string) =>
  [`/rooms/${roomId}:endGame`] as const;

export type EndGameMutationResult = NonNullable<
  Awaited<ReturnType<typeof endGame>>
>;
export type EndGameMutationError = PlatformViewModel | PlatformViewModel;

export const useEndGame = <TError = PlatformViewModel | PlatformViewModel>(
  roomId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof endGame>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof endGame>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getEndGameMutationKey(roomId);
  const swrFn = getEndGameMutationFetcher(roomId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const joinRoom = (
  roomId: string,
  joinRoomRequest: JoinRoomRequest,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<PlatformViewModel>(
    {
      url: `/rooms/${roomId}/players`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: joinRoomRequest,
    },
    options
  );
};

export const getJoinRoomMutationFetcher = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (
    _: Key,
    { arg }: { arg: JoinRoomRequest }
  ): Promise<PlatformViewModel> => {
    return joinRoom(roomId, arg, options);
  };
};
export const getJoinRoomMutationKey = (roomId: string) =>
  [`/rooms/${roomId}/players`] as const;

export type JoinRoomMutationResult = NonNullable<
  Awaited<ReturnType<typeof joinRoom>>
>;
export type JoinRoomMutationError = PlatformViewModel | PlatformViewModel;

export const useJoinRoom = <TError = PlatformViewModel | PlatformViewModel>(
  roomId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof joinRoom>>,
      TError,
      Key,
      JoinRoomRequest,
      Awaited<ReturnType<typeof joinRoom>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getJoinRoomMutationKey(roomId);
  const swrFn = getJoinRoomMutationFetcher(roomId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const readyForRoom = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<PlatformViewModel>(
    { url: `/rooms/${roomId}/players/me:ready`, method: "POST" },
    options
  );
};

export const getReadyForRoomMutationFetcher = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<PlatformViewModel> => {
    return readyForRoom(roomId, options);
  };
};
export const getReadyForRoomMutationKey = (roomId: string) =>
  [`/rooms/${roomId}/players/me:ready`] as const;

export type ReadyForRoomMutationResult = NonNullable<
  Awaited<ReturnType<typeof readyForRoom>>
>;
export type ReadyForRoomMutationError = PlatformViewModel | PlatformViewModel;

export const useReadyForRoom = <TError = PlatformViewModel | PlatformViewModel>(
  roomId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof readyForRoom>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof readyForRoom>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getReadyForRoomMutationKey(roomId);
  const swrFn = getReadyForRoomMutationFetcher(roomId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const cancelReadyForRoom = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<PlatformViewModel>(
    { url: `/rooms/${roomId}/players/me:cancel`, method: "POST" },
    options
  );
};

export const getCancelReadyForRoomMutationFetcher = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<PlatformViewModel> => {
    return cancelReadyForRoom(roomId, options);
  };
};
export const getCancelReadyForRoomMutationKey = (roomId: string) =>
  [`/rooms/${roomId}/players/me:cancel`] as const;

export type CancelReadyForRoomMutationResult = NonNullable<
  Awaited<ReturnType<typeof cancelReadyForRoom>>
>;
export type CancelReadyForRoomMutationError =
  | PlatformViewModel
  | PlatformViewModel;

export const useCancelReadyForRoom = <
  TError = PlatformViewModel | PlatformViewModel,
>(
  roomId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof cancelReadyForRoom>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof cancelReadyForRoom>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCancelReadyForRoomMutationKey(roomId);
  const swrFn = getCancelReadyForRoomMutationFetcher(roomId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const findGameRegistrations = (
  params?: FindGameRegistrationsParams,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<GameRegistrationViewModel[]>(
    { url: `/games`, method: "GET", params },
    options
  );
};

export const getFindGameRegistrationsKey = (
  params?: FindGameRegistrationsParams
) => [`/games`, ...(params ? [params] : [])] as const;

export type FindGameRegistrationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findGameRegistrations>>
>;
export type FindGameRegistrationsQueryError =
  | PlatformViewModel
  | PlatformViewModel;

export const useFindGameRegistrations = <
  TError = PlatformViewModel | PlatformViewModel,
>(
  params?: FindGameRegistrationsParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof findGameRegistrations>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getFindGameRegistrationsKey(params) : null));
  const swrFn = () => findGameRegistrations(params, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const registerGame = (
  registerGameRequest: RegisterGameRequest,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<RegisterGame200>(
    {
      url: `/games`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: registerGameRequest,
    },
    options
  );
};

export const getRegisterGameMutationFetcher = (
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (
    _: Key,
    { arg }: { arg: RegisterGameRequest }
  ): Promise<RegisterGame200> => {
    return registerGame(arg, options);
  };
};
export const getRegisterGameMutationKey = () => [`/games`] as const;

export type RegisterGameMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerGame>>
>;
export type RegisterGameMutationError = PlatformViewModel | PlatformViewModel;

export const useRegisterGame = <
  TError = PlatformViewModel | PlatformViewModel,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof registerGame>>,
    TError,
    Key,
    RegisterGameRequest,
    Awaited<ReturnType<typeof registerGame>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof orvalFetcher>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getRegisterGameMutationKey();
  const swrFn = getRegisterGameMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const commentGame = (
  commentGameRequest: CommentGameRequest,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<PlatformViewModel>(
    {
      url: `/comments`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: commentGameRequest,
    },
    options
  );
};

export const getCommentGameMutationFetcher = (
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (
    _: Key,
    { arg }: { arg: CommentGameRequest }
  ): Promise<PlatformViewModel> => {
    return commentGame(arg, options);
  };
};
export const getCommentGameMutationKey = () => [`/comments`] as const;

export type CommentGameMutationResult = NonNullable<
  Awaited<ReturnType<typeof commentGame>>
>;
export type CommentGameMutationError = PlatformViewModel | PlatformViewModel;

export const useCommentGame = <
  TError = PlatformViewModel | PlatformViewModel,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof commentGame>>,
    TError,
    Key,
    CommentGameRequest,
    Awaited<ReturnType<typeof commentGame>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof orvalFetcher>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCommentGameMutationKey();
  const swrFn = getCommentGameMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const updateGameComment = (
  gameId: string,
  updateGameCommentRequest: UpdateGameCommentRequest,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<PlatformViewModel>(
    {
      url: `/comments/games/${gameId}`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: updateGameCommentRequest,
    },
    options
  );
};

export const getUpdateGameCommentMutationFetcher = (
  gameId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (
    _: Key,
    { arg }: { arg: UpdateGameCommentRequest }
  ): Promise<PlatformViewModel> => {
    return updateGameComment(gameId, arg, options);
  };
};
export const getUpdateGameCommentMutationKey = (gameId: string) =>
  [`/comments/games/${gameId}`] as const;

export type UpdateGameCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateGameComment>>
>;
export type UpdateGameCommentMutationError =
  | PlatformViewModel
  | PlatformViewModel;

export const useUpdateGameComment = <
  TError = PlatformViewModel | PlatformViewModel,
>(
  gameId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof updateGameComment>>,
      TError,
      Key,
      UpdateGameCommentRequest,
      Awaited<ReturnType<typeof updateGameComment>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getUpdateGameCommentMutationKey(gameId);
  const swrFn = getUpdateGameCommentMutationFetcher(gameId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const collectGame = (
  gameId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<PlatformViewModel>(
    { url: `/collections/games/${gameId}`, method: "POST" },
    options
  );
};

export const getCollectGameMutationFetcher = (
  gameId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<PlatformViewModel> => {
    return collectGame(gameId, options);
  };
};
export const getCollectGameMutationKey = (gameId: string) =>
  [`/collections/games/${gameId}`] as const;

export type CollectGameMutationResult = NonNullable<
  Awaited<ReturnType<typeof collectGame>>
>;
export type CollectGameMutationError = PlatformViewModel | PlatformViewModel;

export const useCollectGame = <TError = PlatformViewModel | PlatformViewModel>(
  gameId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof collectGame>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof collectGame>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCollectGameMutationKey(gameId);
  const swrFn = getCollectGameMutationFetcher(gameId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const unCollectGame = (
  gameId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<PlatformViewModel>(
    { url: `/collections/games/${gameId}`, method: "DELETE" },
    options
  );
};

export const getUnCollectGameMutationFetcher = (
  gameId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<PlatformViewModel> => {
    return unCollectGame(gameId, options);
  };
};
export const getUnCollectGameMutationKey = (gameId: string) =>
  [`/collections/games/${gameId}`] as const;

export type UnCollectGameMutationResult = NonNullable<
  Awaited<ReturnType<typeof unCollectGame>>
>;
export type UnCollectGameMutationError = PlatformViewModel | PlatformViewModel;

export const useUnCollectGame = <
  TError = PlatformViewModel | PlatformViewModel,
>(
  gameId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof unCollectGame>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof unCollectGame>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getUnCollectGameMutationKey(gameId);
  const swrFn = getUnCollectGameMutationFetcher(gameId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const authenticate = (
  authenticateToken: AuthenticateToken,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<AuthenticateToken>(
    {
      url: `/authenticate`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: authenticateToken,
    },
    options
  );
};

export const getAuthenticateMutationFetcher = (
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (
    _: Key,
    { arg }: { arg: AuthenticateToken }
  ): Promise<AuthenticateToken> => {
    return authenticate(arg, options);
  };
};
export const getAuthenticateMutationKey = () => [`/authenticate`] as const;

export type AuthenticateMutationResult = NonNullable<
  Awaited<ReturnType<typeof authenticate>>
>;
export type AuthenticateMutationError = PlatformViewModel | PlatformViewModel;

export const useAuthenticate = <
  TError = PlatformViewModel | PlatformViewModel,
>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof authenticate>>,
    TError,
    Key,
    AuthenticateToken,
    Awaited<ReturnType<typeof authenticate>>
  > & { swrKey?: string };
  request?: SecondParameter<typeof orvalFetcher>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getAuthenticateMutationKey();
  const swrFn = getAuthenticateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const home = (
  params: HomeParams,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<string>({ url: `/`, method: "GET", params }, options);
};

export const getHomeKey = (params: HomeParams) =>
  [`/`, ...(params ? [params] : [])] as const;

export type HomeQueryResult = NonNullable<Awaited<ReturnType<typeof home>>>;
export type HomeQueryError = PlatformViewModel | PlatformViewModel;

export const useHome = <TError = PlatformViewModel | PlatformViewModel>(
  params: HomeParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof home>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getHomeKey(params) : null));
  const swrFn = () => home(params, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const walk = (options?: SecondParameter<typeof orvalFetcher>) => {
  return orvalFetcher<string>(
    { url: `/walking-skeleton`, method: "GET" },
    options
  );
};

export const getWalkKey = () => [`/walking-skeleton`] as const;

export type WalkQueryResult = NonNullable<Awaited<ReturnType<typeof walk>>>;
export type WalkQueryError = PlatformViewModel | PlatformViewModel;

export const useWalk = <
  TError = PlatformViewModel | PlatformViewModel,
>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof walk>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  request?: SecondParameter<typeof orvalFetcher>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getWalkKey() : null));
  const swrFn = () => walk(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const getRoom = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<GetRoomViewModel>(
    { url: `/rooms/${roomId}`, method: "GET" },
    options
  );
};

export const getGetRoomKey = (roomId: string) => [`/rooms/${roomId}`] as const;

export type GetRoomQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRoom>>
>;
export type GetRoomQueryError = PlatformViewModel | PlatformViewModel;

export const useGetRoom = <TError = PlatformViewModel | PlatformViewModel>(
  roomId: string,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getRoom>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false && !!roomId;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetRoomKey(roomId) : null));
  const swrFn = () => getRoom(roomId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const closeRoom = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<null>(
    { url: `/rooms/${roomId}`, method: "DELETE" },
    options
  );
};

export const getCloseRoomMutationFetcher = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<null> => {
    return closeRoom(roomId, options);
  };
};
export const getCloseRoomMutationKey = (roomId: string) =>
  [`/rooms/${roomId}`] as const;

export type CloseRoomMutationResult = NonNullable<
  Awaited<ReturnType<typeof closeRoom>>
>;
export type CloseRoomMutationError = PlatformViewModel | PlatformViewModel;

export const useCloseRoom = <TError = PlatformViewModel | PlatformViewModel>(
  roomId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof closeRoom>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof closeRoom>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCloseRoomMutationKey(roomId);
  const swrFn = getCloseRoomMutationFetcher(roomId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const login = (
  params: LoginParams,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<Unit>({ url: `/login`, method: "GET", params }, options);
};

export const getLoginKey = (params: LoginParams) =>
  [`/login`, ...(params ? [params] : [])] as const;

export type LoginQueryResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type LoginQueryError = PlatformViewModel | PlatformViewModel;

export const useLogin = <TError = PlatformViewModel | PlatformViewModel>(
  params: LoginParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof login>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getLoginKey(params) : null));
  const swrFn = () => login(params, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const healthCheck = (options?: SecondParameter<typeof orvalFetcher>) => {
  return orvalFetcher<null>({ url: `/health`, method: "GET" }, options);
};

export const getHealthCheckKey = () => [`/health`] as const;

export type HealthCheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof healthCheck>>
>;
export type HealthCheckQueryError = PlatformViewModel | PlatformViewModel;

export const useHealthCheck = <
  TError = PlatformViewModel | PlatformViewModel,
>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof healthCheck>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
  request?: SecondParameter<typeof orvalFetcher>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getHealthCheckKey() : null));
  const swrFn = () => healthCheck(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const getGameCollections = (
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<GameRegistrationViewModel[]>(
    { url: `/collections`, method: "GET" },
    options
  );
};

export const getGetGameCollectionsKey = () => [`/collections`] as const;

export type GetGameCollectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGameCollections>>
>;
export type GetGameCollectionsQueryError =
  | PlatformViewModel
  | PlatformViewModel;

export const useGetGameCollections = <
  TError = PlatformViewModel | PlatformViewModel,
>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof getGameCollections>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
  request?: SecondParameter<typeof orvalFetcher>;
}) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetGameCollectionsKey() : null));
  const swrFn = () => getGameCollections(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions
  );

  return {
    swrKey,
    ...query,
  };
};

export const kickPlayer = (
  roomId: string,
  playerId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<PlatformViewModel>(
    { url: `/rooms/${roomId}/players/${playerId}`, method: "DELETE" },
    options
  );
};

export const getKickPlayerMutationFetcher = (
  roomId: string,
  playerId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<PlatformViewModel> => {
    return kickPlayer(roomId, playerId, options);
  };
};
export const getKickPlayerMutationKey = (roomId: string, playerId: string) =>
  [`/rooms/${roomId}/players/${playerId}`] as const;

export type KickPlayerMutationResult = NonNullable<
  Awaited<ReturnType<typeof kickPlayer>>
>;
export type KickPlayerMutationError = PlatformViewModel | PlatformViewModel;

export const useKickPlayer = <TError = PlatformViewModel | PlatformViewModel>(
  roomId: string,
  playerId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof kickPlayer>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof kickPlayer>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey =
    swrOptions?.swrKey ?? getKickPlayerMutationKey(roomId, playerId);
  const swrFn = getKickPlayerMutationFetcher(roomId, playerId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const leaveRoom = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return orvalFetcher<null>(
    { url: `/rooms/${roomId}/players/me`, method: "DELETE" },
    options
  );
};

export const getLeaveRoomMutationFetcher = (
  roomId: string,
  options?: SecondParameter<typeof orvalFetcher>
) => {
  return (_: Key, __: { arg: Arguments }): Promise<null> => {
    return leaveRoom(roomId, options);
  };
};
export const getLeaveRoomMutationKey = (roomId: string) =>
  [`/rooms/${roomId}/players/me`] as const;

export type LeaveRoomMutationResult = NonNullable<
  Awaited<ReturnType<typeof leaveRoom>>
>;
export type LeaveRoomMutationError = PlatformViewModel | PlatformViewModel;

export const useLeaveRoom = <TError = PlatformViewModel | PlatformViewModel>(
  roomId: string,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof leaveRoom>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof leaveRoom>>
    > & { swrKey?: string };
    request?: SecondParameter<typeof orvalFetcher>;
  }
) => {
  const { swr: swrOptions, request: requestOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getLeaveRoomMutationKey(roomId);
  const swrFn = getLeaveRoomMutationFetcher(roomId, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
