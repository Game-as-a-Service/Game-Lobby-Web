import { defineConfig } from "orval";

export default defineConfig({
  api: {
    output: {
      mode: "single",
      target: "services/api/index.ts",
      client: "swr",
      override: {
        mutator: {
          path: "services/api/fetcher.ts",
          name: "orvalFetcher",
        },
        query: {
          useQuery: true,
          useInfinite: false,
          signal: true,
        },
        header: (info) => [
          "Generated by orval 🍺",
          "Do not edit manually.",
          `OpenAPI spec version: ${info.version}`,
          "",
        ],
      },
    },
    input: {
      target: "https://api.gaas.waterballsa.tw/swagger-ui/api-docs",
      validation: false,
      override: {
        transformer: (spec: any) => {
          // 要過濾的參數名稱和 schema
          const unwantedParams = ["jwt", "principal"];
          const unwantedSchemas = ["Jwt", "JwtHeaders", "JwtClaims"];

          // 遞迴清理 schema 中的屬性
          const cleanSchema = (schema: any): any => {
            if (!schema || typeof schema !== "object") return schema;

            // 處理 $ref 引用
            if (
              schema.$ref &&
              unwantedSchemas.some((name) => schema.$ref.includes(name))
            ) {
              return undefined;
            }

            if (schema.properties) {
              const newProperties = { ...schema.properties };
              unwantedParams.forEach((param) => {
                delete newProperties[param];
              });
              schema.properties = newProperties;

              if (schema.required) {
                schema.required = schema.required.filter(
                  (prop: string) => !unwantedParams.includes(prop)
                );
                if (schema.required.length === 0) {
                  delete schema.required;
                }
              }
            }

            // 處理嵌套結構
            if (schema.items) {
              const cleanedItems = cleanSchema(schema.items);
              if (cleanedItems !== undefined) {
                schema.items = cleanedItems;
              } else {
                delete schema.items;
              }
            }

            if (schema.allOf) {
              schema.allOf = schema.allOf
                .map(cleanSchema)
                .filter((s: any) => s !== undefined);
            }

            if (schema.oneOf) {
              schema.oneOf = schema.oneOf
                .map(cleanSchema)
                .filter((s: any) => s !== undefined);
            }

            if (schema.anyOf) {
              schema.anyOf = schema.anyOf
                .map(cleanSchema)
                .filter((s: any) => s !== undefined);
            }

            return schema;
          };

          // 清理 components/schemas
          if (spec.components?.schemas) {
            // 移除不需要的 schema
            unwantedSchemas.forEach((schemaName) => {
              delete spec.components.schemas[schemaName];
            });

            // 清理其他 schema 中的屬性
            Object.keys(spec.components.schemas).forEach((key) => {
              spec.components.schemas[key] = cleanSchema(
                spec.components.schemas[key]
              );
            });
          }

          // 清理 paths 中的操作
          if (spec.paths) {
            Object.keys(spec.paths).forEach((pathKey) => {
              const pathItem = spec.paths[pathKey];
              Object.keys(pathItem).forEach((method) => {
                const operation = pathItem[method];
                if (!operation || typeof operation !== "object") return;

                // 移除不需要的參數
                if (operation.parameters) {
                  operation.parameters = operation.parameters.filter(
                    (param: any) => !unwantedParams.includes(param.name)
                  );
                }

                // 清理 requestBody
                if (operation.requestBody?.content) {
                  Object.keys(operation.requestBody.content).forEach(
                    (contentType) => {
                      const content =
                        operation.requestBody.content[contentType];
                      if (content.schema) {
                        content.schema = cleanSchema(content.schema);
                      }
                    }
                  );
                }

                // 清理 responses
                if (operation.responses) {
                  Object.keys(operation.responses).forEach((statusCode) => {
                    const response = operation.responses[statusCode];
                    if (response?.content) {
                      Object.keys(response.content).forEach((contentType) => {
                        const content = response.content[contentType];
                        if (content.schema) {
                          content.schema = cleanSchema(content.schema);
                        }
                      });
                    }
                  });
                }

                // 特殊處理：移除操作中直接使用 JWT 作為 requestBody 的情況
                if (
                  operation.requestBody?.content?.[
                    "application/json"
                  ]?.schema?.$ref?.includes("Jwt")
                ) {
                  delete operation.requestBody;
                }
              });
            });
          }

          return spec;
        },
      },
    },
    hooks: {
      afterAllFilesWrite: "prettier --write services/api/index.ts",
    },
  },
});
